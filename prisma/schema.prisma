// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuarios (sincronizado con Clerk)
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  orders    Order[]
  
  @@map("users")
}

// Categorías de productos
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  
  // Metadatos
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  products    Product[]
  
  @@map("categories")
}

// Banners del carousel
model Banner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  image       String   // URL de Cloudinary
  buttonText  String?
  buttonLink  String?
  order       Int      @default(0) // Orden de aparición
  isActive    Boolean  @default(true)
  
  // Metadatos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("banners")
}

// Configuración de la tienda
model StoreSettings {
  id            String   @id @default(cuid())
  storeName     String
  address       String
  phone         String
  email         String
  whatsapp      String
  description   String?
  openingHours  Json     // Horarios por día de la semana
  socialMedia   Json     // URLs de redes sociales
  isOpen        Boolean  @default(true)
  
  // Metadatos
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("store_settings")
}

// Páginas de contenido
model Page {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   // Contenido HTML/Markdown
  excerpt         String?  // Resumen corto
  metaTitle       String?  // SEO
  metaDescription String?  // SEO
  isActive        Boolean  @default(true)
  showInMenu      Boolean  @default(false) // Mostrar en navegación
  order           Int      @default(0)
  
  // Metadatos
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("pages")
}

// Productos
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Int      // Precio en pesos chilenos (CLP)
  images      String[] // URLs de Cloudinary
  isActive    Boolean  @default(true)
  isAvailable Boolean  @default(true)
  stock       Int      @default(0)
  
  // Metadatos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  
  @@map("products")
}

// Estados de pedidos
enum OrderStatus {
  DRAFT                    // Borrador (antes del pago)
  PENDIENTE               // Pendiente de pago
  ESPERANDO_CONFIRMACION  // Transferencia enviada, esperando confirmación
  PAGADO                  // Pagado, preparando
  PREPARANDO              // En preparación
  LISTO                   // Listo para retiro
  RETIRADO                // Retirado por cliente
  CANCELADO               // Cancelado
}

// Pedidos
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(DRAFT)
  total         Int         // Total en pesos chilenos (CLP)
  paymentMethod String?     // MERCADOPAGO, TRANSFER
  
  // Información de retiro
  pickupDate    DateTime?   // Fecha programada de retiro
  pickupTime    String?     // Hora de retiro (ej: "14:30")
  customerNotes String?     // Notas del cliente
  adminNotes    String?     // Notas internas
  
  // Metadatos
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relaciones
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  payment       Payment?
  
  @@map("orders")
}

// Items de pedidos
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Int     // Precio unitario en pesos chilenos
  
  // Relaciones
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Estados de pago
enum PaymentStatus {
  PENDING   // Pendiente
  PAID      // Pagado
  FAILED    // Fallido
  REFUNDED  // Reembolsado
}

// Pagos (WebPay Plus)
model Payment {
  id              String        @id @default(cuid())
  status          PaymentStatus @default(PENDING)
  amount          Int           // Monto en pesos chilenos
  currency        String        @default("CLP")
  
  // WebPay Plus data
  transactionId   String?       @unique
  buyOrder        String?       @unique
  sessionId       String?
  cardNumber      String?       // Últimos 4 dígitos
  authCode        String?
  responseCode    String?
  
  // Metadatos
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relaciones
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id])
  
  @@map("payments")
} 